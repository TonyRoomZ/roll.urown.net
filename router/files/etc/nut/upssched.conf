# Network UPS Tools - upssched.conf
#
# ============================================================================
#
# CMDSCRIPT <scriptname>
#
# This script gets called to invoke commands for timers that trigger.
# It is given a single argument - the <timername> in your
# AT ... START-TIMER defines.
#
# *** This must be defined *before* the first AT line.  Otherwise the
#     program will complain and exit without doing anything.
#
# A shell script with a big case..esac construct should work nicely for this.
# An example has been provided to help you get started.
#
# ***** Note for OpenWrt Users ****
# Use your own script in a custom location, as modifications to the sample file
# provided in /usr/bin/upssched-cmd will be lost on updates.
#
#CMDSCRIPT /usr/bin/upssched-cmd
CMDSCRIPT /root/upssched-cmd

# ============================================================================
#
# PIPEFN <filename>
#
# This sets the file name of the FIFO that will pass communications between
# processes to start and stop timers.  This should be set to some path where
# normal users can't create the file, due to the possibility of symlinking
# and other evil.
#
# Note: if you are running Solaris or similar, the permissions that
# upssched sets on this file *are not enough* to keep you safe.  If
# your OS ignores the permissions on a FIFO, then you MUST put this in
# a protected directory!
#
# Note 2: by default, upsmon will run upssched as whatever user you have
# defined with RUN_AS_USER in upsmon.conf.  Make sure that user can
# create files and write to files in the path you use for PIPEFN and
# LOCKFN.
#
# My recommendation: create a special directory for upssched, make it
# owned by your upsmon user, then use it for both.
#
# This is commented out by default to make you visit this file and think
# about how your system works before potentially opening a hole.
#
# ***** Note for OpenWrt Users ****
# The directory /var/run is re-created after every reboot, so the directory is
# not available, create and use your own custom location instead.
#
# PIPEFN /var/run/nut/upssched/upssched.pipe
PIPEFN /srv/nut/upssched/upssched.pipe

# ============================================================================
#
# LOCKFN <filename>
#
# REQUIRED.  This was added after version 1.2.1.
#
# upssched needs to be able to create this filename in order to avoid
# a race condition when two events are dispatched from upsmon at nearly
# the same time.  This file will only exist briefly.  It must not be
# created by any other process.
#
# You should put this in the same directory as PIPEFN.
#
# LOCKFN /var/run/nut/upssched/upssched.lock
LOCKFN /srv/nut/upssched/upssched.lock

# ============================================================================
#
# AT <notifytype> <upsname> <command>
#
# Define a handler for a specific event <notifytype> on UPS <upsname>.
#
# <upsname> can be the special value * to apply this handler to every
# possible value of <upsname>.
#
# Run the command <command> via your CMDSCRIPT when it happens.
#
# Note that any AT that matches both the <notifytype> and the <upsname>
# for the current event will be used.

# ============================================================================
#
# Possible AT commands
#
# - START-TIMER <timername> <interval>
#
#   Start a timer called <timername> that will trigger after <interval>
#   seconds, calling your CMDSCRIPT with <timername> as the first
#   argument.
#
#   Example:
#   Start a timer that'll execute when any UPS (*) has been gone 10 seconds
#
#   AT COMMBAD * START-TIMER upsgone 10

#   -----------------------------------------------------------------------
#
# - CANCEL-TIMER <timername> [cmd]
#
#   Cancel a running timer called <timername>, if possible. If the timer
#   has passed then pass the optional argument <cmd> to CMDSCRIPT.
#
#   Example:
#   If a specific UPS (myups@localhost) comes back online, then stop the
#   timer before it triggers
#
#   AT COMMOK myups@localhost CANCEL-TIMER upsgone

#   -----------------------------------------------------------------------
#
# - EXECUTE <command>
#
#   Immediately pass <command> as an argument to CMDSCRIPT.
#
#   Example:
#   If any UPS (*) reverts to utility power, then execute
#   'ups-back-on-line' via CMDSCRIPT.
#
#   AT ONLINE * EXECUTE ups-back-on-line


# The UPS is back on online power.
# Cancel any running "On Battery" timer, then execute the "Online" command.
AT ONLINE apc CANCEL-TIMER onbatt online

# Online power failure: The UPS is running on battery
# Start a 10 seconds timer, then execute the "On Battery" command.
AT ONBATT apc START-TIMER onbatt 10

# The UPS battery is low (as determined by the driver).
# Execute the "Low Battery" command immediately.
AT LOWBATT apc EXECUTE lowbatt

# The UPS has been commanded into the "Forced Shutdown" mode.
# Execute the "Forced Shutdown" command immediately.
AT FSD apc EXECUTE fsd

# Communications with the UPS has been (re-)established.
# Cancel any running "Communications Lost" timer, then execute the
# "Communications Restored" command.
AT COMMOK apc CANCEL-TIMER commbad commok

# Communication with the UPS was just lost.
# Start a 15 seconds timer, then execute the "Communications Lost" command.
AT COMMBAD apc START-TIMER commbad 15

# The local system is being shut down.
# Execute the "Notify Shutdown" command immediately.
AT SHUTDOWN apc EXECUTE shutdown

# The UPS needs to have its battery replaced.
# Start a 5 minutes timer, then execute the "Replace Battery" command.
AT REPLBATT apc EXECUTE replbatt 300

# The UPS canâ€™t be contacted for monitoring.
# Start a 15 seconds timer, then execute the "No Communications" command.
AT NOCOMM apc START-TIMER nocomm 15
